// package main

// import (
// 	"context"
// 	"encoding/base64"
// 	"log"
// 	"net/http"
// 	"time"

// 	"github.com/chromedp/chromedp"
// 	"github.com/gin-gonic/gin"
// )

// func captureAndEncodeScreenshot(url string) (string, error) {
// 	ctx, cancel := chromedp.NewContext(context.Background())
// 	defer cancel()

// 	// Set a timeout for the screenshot (30 seconds)
// 	ctx, cancel = context.WithTimeout(ctx, 30*time.Second)
// 	defer cancel()

// 	var buf []byte
// 	err := chromedp.Run(ctx, chromedp.Tasks{
// 		chromedp.Navigate(url),
// 		chromedp.WaitVisible(`body`, chromedp.ByQuery),
// 		chromedp.CaptureScreenshot(&buf),
// 	})

// 	if err != nil {
// 		return "", err
// 	}

// 	base64Image := base64.StdEncoding.EncodeToString(buf)
// 	return base64Image, nil
// }

// func main() {
// 	r := gin.Default()

// 	r.POST("/cap-image", func(c *gin.Context) {
// 		var request struct {
// 			URL string `json:"url" binding:"required"`
// 		}

// 		if err := c.BindJSON(&request); err != nil {
// 			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
// 			return
// 		}

// 		base64Image, err := captureAndEncodeScreenshot(request.URL)
// 		if err != nil {
// 			log.Printf("Error capturing screenshot: %v\n", err)
// 			c.JSON(http.StatusInternalServerError, gin.H{"error": "Internal Server Error"})
// 			return
// 		}

// 		c.JSON(http.StatusOK, gin.H{"image": base64Image})
// 	})

// 	r.Run(":8080")
// }
